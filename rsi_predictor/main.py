"""
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è RSI –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
"""
import logging
import warnings
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import ModelConfig
from rsi_predictor import RSIPredictor
from utilities import (
    analyze_your_csv, 
    train_on_accumulated_data, 
    integrate_with_existing_data,
    create_test_data
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
warnings.filterwarnings('ignore')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ RSI Predictor - –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è RSI")
    print("=" * 60)
    
    # 1. –ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –î–ê–ù–ù–´–•
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö CSV —Ñ–∞–π–ª–æ–≤:")
    
    # –í–∞—à–∏ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    your_csv_files = [
        "accumulatedData_2024.csv",
        "accumulatedData_2025.csv",
        "data.csv"  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ]
    
    for csv_file in your_csv_files:
        try:
            print(f"\n--- –ê–Ω–∞–ª–∏–∑ {csv_file} ---")
            analyze_your_csv(csv_file)
        except FileNotFoundError:
            print(f"–§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {csv_file}: {e}")
    
    # 2. –û–ë–£–ß–ï–ù–ò–ï –ù–ê –í–ê–®–ò–• –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
    print(f"\nüöÄ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ RSI –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ 2024, –ø–æ—Ç–æ–º 2025
    priority_files = [
        "accumulatedData_2024.csv",
        "accumulatedData_2025.csv"
    ]
    
    trained_successfully = False
    
    for csv_file in priority_files:
        try:
            print(f"\nüìä –ü–æ–ø—ã—Ç–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {csv_file}...")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            config = ModelConfig(
                model_type='catboost',
                test_size=0.2,
                cv_folds=3,  # –ú–µ–Ω—å—à–µ —Ñ–æ–ª–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                catboost_params={
                    'iterations': 500,  # –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    'learning_rate': 0.1,
                    'depth': 6,
                    'random_seed': 42,
                    'verbose': False,
                    'early_stopping_rounds': 50
                }
            )
            
            predictor = RSIPredictor(config)
            
            # –û–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            predictor = integrate_with_existing_data(csv_file)
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ {csv_file}")
            
            # –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            from data_adapter import DataAdapter
            df = DataAdapter.load_csv(csv_file)
            result = predictor.predict(df, return_confidence=True)
            print(f"üîÆ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {result}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print(f"\nüìä –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            importance_df = predictor.get_feature_importance(10)
            for idx, row in importance_df.iterrows():
                print(f"  {row['feature']:<25} - {row['importance']:.4f}")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            try:
                predictor.plot_feature_importance(top_n=15)
            except:
                print("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            trained_successfully = True
            break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {csv_file}: {e}")
            import traceback
            print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            continue
    
    # 3. FALLBACK - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
    if not trained_successfully:
        print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ fallback
        df = create_test_data(500)
        
        config = ModelConfig(model_type='catboost', test_size=0.2, cv_folds=3)
        predictor = RSIPredictor(config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
        Path("models").mkdir(exist_ok=True)
        
        metrics = predictor.train(df, save_path="models/rsi_predictor_fallback.pkl")
        result = predictor.predict(df, return_confidence=True)
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
        print(f"üîÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # 4. –ü–û–ü–´–¢–ö–ê –û–ë–™–ï–î–ò–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
    try:
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 2024 –∏ 2025...")
        combined_predictor = train_on_accumulated_data()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
    
    print(f"\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'models/' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

if __name__ == "__main__":
    main()