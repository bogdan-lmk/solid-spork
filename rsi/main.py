"""
–ì–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –¥–ª—è RSI –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
import sys
import os
from pathlib import Path
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = Path(__file__).parent.absolute()
sys.path.insert(0, str(current_dir))

import logging
import warnings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
warnings.filterwarnings('ignore')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    
    print("üöÄ RSI Predictor - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è RSI")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from config import ModelConfig
        from rsi_predictor import RSIPredictor
        from data_adapter import DataAdapter
        from utilities import analyze_your_csv, create_test_data
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return
    
    # –ü–æ–∏—Å–∫ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    data_files = []
    search_paths = [current_dir, current_dir.parent, Path.cwd()]
    target_files = ["accumulatedData_2024.csv", "accumulatedData_2025.csv"]
    
    print("\nüîç –ü–æ–∏—Å–∫ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    for search_path in search_paths:
        for target_file in target_files:
            file_path = search_path / target_file
            if file_path.exists():
                data_files.append(str(file_path))
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {file_path}")
    
    if not data_files:
        print("‚ùå –§–∞–π–ª—ã accumulatedData –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ main.py")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
        print("\nüîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        try:
            df = create_test_data(500)
            data_files = [df]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DataFrame –Ω–∞–ø—Ä—è–º—É—é
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
    else:
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(data_files)}")
    
    # –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –í–ê–®–ò–• –î–ê–ù–ù–´–•:")
    for data_file in data_files[:2]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2
        try:
            if isinstance(data_file, str):
                print(f"\n--- –ê–Ω–∞–ª–∏–∑ {Path(data_file).name} ---")
                analyze_your_csv(data_file)
            else:
                print(f"\n--- –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---")
                print(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data_file.shape}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï
    print(f"\nüöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò:")
    print("-" * 40)
    
    trained_successfully = False
    predictor = None
    
    # –ü—Ä–æ–±—É–µ–º –æ–±—É—á–∏—Ç—å –Ω–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    for data_file in data_files:
        try:
            if isinstance(data_file, str):
                print(f"\nüìä –û–±—É—á–µ–Ω–∏–µ –Ω–∞ {Path(data_file).name}...")
                df = DataAdapter.load_csv(data_file)
            else:
                print(f"\nüìä –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                df = data_file
            
            print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {df.shape}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rsi_volatility
            if 'rsi_volatility' not in df.columns:
                print(f"‚ùå –ù–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ rsi_volatility –≤ –¥–∞–Ω–Ω—ã—Ö")
                continue
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ OHLCV —Ñ–æ—Ä–º–∞—Ç—É
            df_clean = DataAdapter.adapt_to_ohlcv(df)
            print(f"–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã: {df_clean.shape}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
            config = ModelConfig(
                model_type='catboost',
                test_size=0.2,
                cv_folds=3,
                catboost_params={
                    'iterations': 300,          # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ
                    'learning_rate': 0.05,      # –£–º–µ—Ä–µ–Ω–Ω–æ
                    'depth': 4,                 # –ù–µ–≥–ª—É–±–æ–∫–æ
                    'l2_leaf_reg': 15,          # –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è
                    'early_stopping_rounds': 50,
                    'verbose': False,
                    'random_seed': 42
                }
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            predictor = RSIPredictor(config)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
            models_dir = current_dir / "models"
            models_dir.mkdir(exist_ok=True)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ
            model_path = models_dir / "rsi_predictor_fixed.pkl"
            print(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
            
            metrics = predictor.train(df_clean, save_path=str(model_path))
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø:")
            for model_type, result in metrics.items():
                print(f"\n{model_type.upper()} –º–æ–¥–µ–ª—å:")
                if isinstance(result, dict):
                    for metric, value in result.items():
                        if isinstance(value, float):
                            print(f"  {metric}: {value:.3f}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            print(f"\nüîÆ –¢–ï–°–¢–û–í–û–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï:")
            result = predictor.predict(df_clean, return_confidence=True)
            
            print(f"üìÖ –î–∞—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {result.prediction_date.strftime('%d.%m.%Y %H:%M')}")
            print(f"üìä –¢–µ–∫—É—â–∏–π RSI: {result.current_rsi:.2f}")
            print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π RSI: {result.predicted_rsi:.2f}")
            print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {result.change:+.2f}")
            print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence:.1f}%")
            
            # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print(f"\nüìä –í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í:")
            importance_df = predictor.get_feature_importance(10)
            if not importance_df.empty:
                for idx, row in importance_df.iterrows():
                    print(f"  {row['feature']:<30}: {row['importance']:.3f}")
            else:
                print("  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            trained_successfully = True
            break
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            continue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if trained_successfully:
        print(f"\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
        models_dir = current_dir / "models"
        if models_dir.exists():
            model_files = list(models_dir.glob("*.pkl"))
            print(f"\nüìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for model_file in model_files:
                print(f"  üìÑ {model_file.name}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ò–°–ü–†–ê–í–õ–ï–ù–ê - –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ò–°–ü–†–ê–í–õ–ï–ù–ê - –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—à rsi_volatility –∫–∞–∫ –æ—Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        print("‚úÖ –°–æ–∑–¥–∞—é—Ç—Å—è —Ç—Ä–∏ —Ç–∏–ø–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        print(f"\nüîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("  1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å: predictor.load('models/rsi_predictor_fixed.pkl')")
        print("  2. –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: predictor.predict(new_data, return_confidence=True)")
        print("  3. –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
        
    else:
        print(f"\n‚ùå –û–ë–£–ß–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("  - –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ accumulatedData_2024.csv –∏ accumulatedData_2025.csv")
        print("  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–∞—Ö")
        print("  - –ù–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ rsi_volatility")

def demo_prediction():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –º–æ–¥–µ–ª—å—é"""
    
    print("\n" + "="*50)
    print("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ú–û–î–ï–õ–ò")
    print("="*50)
    
    try:
        from rsi_predictor import RSIPredictor
        from data_adapter import DataAdapter
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_path = current_dir / "models" / "rsi_predictor_fixed.pkl"
        if model_path.exists():
            predictor = RSIPredictor()
            predictor.load(str(model_path))
            print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path.name}")
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {list(predictor.models.keys())}")
            
            # –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            data_file = None
            for search_path in [current_dir, current_dir.parent]:
                for filename in ["accumulatedData_2025.csv", "accumulatedData_2024.csv"]:
                    file_path = search_path / filename
                    if file_path.exists():
                        data_file = str(file_path)
                        break
                if data_file:
                    break
            
            if data_file:
                print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ: {Path(data_file).name}")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df = DataAdapter.load_csv(data_file)
                df_clean = DataAdapter.adapt_to_ohlcv(df)
                
                print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {df_clean.shape}")
                print(f"üóìÔ∏è  –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {df_clean['open_time'].iloc[-1] if 'open_time' in df_clean.columns else 'N/A'}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                result = predictor.predict(df_clean, return_confidence=True)
                
                print(f"\nüîÆ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
                print(f"üìÖ –î–∞—Ç–∞: {result.prediction_date.strftime('%d.%m.%Y %H:%M')}")
                print(f"üìä –¢–µ–∫—É—â–∏–π RSI: {result.current_rsi:.2f}")
                print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π RSI: {result.predicted_rsi:.2f}")
                print(f"üìà –û–∂–∏–¥–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {result.change:+.2f}")
                print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {result.confidence:.1f}%")
                
                # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                print(f"\nüí° –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø:")
                if abs(result.change) < 1:
                    print("üü° –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI - –±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
                elif result.change > 2:
                    print("üü¢ –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç RSI - –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≤–Ω–∏–∑")
                elif result.change < -2:
                    print("üî¥ –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ RSI - –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö")
                else:
                    print("üîµ –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI")
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                current_rsi = result.current_rsi
                predicted_rsi = result.predicted_rsi
                
                print(f"\nüìà –¢–û–†–ì–û–í–´–ï –°–ò–ì–ù–ê–õ–´:")
                if current_rsi > 70 and result.change < -2:
                    print("üî¥ RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–∞–¥–µ–Ω–∏–µ")
                    print("   –°–∏–≥–Ω–∞–ª: –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–¥–∞–∂–∞")
                elif current_rsi < 30 and result.change > 2:
                    print("üü¢ RSI –≤ –∑–æ–Ω–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç")
                    print("   –°–∏–≥–Ω–∞–ª: –í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–∫—É–ø–∫–∞")
                elif 30 <= current_rsi <= 70:
                    print("üü° RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ")
                    print("   –°–∏–≥–Ω–∞–ª: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                else:
                    print("‚ö™ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
                
                print(f"\n‚ö†Ô∏è  –í–ê–ñ–ù–û:")
                print("‚Ä¢ –≠—Ç–æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –±–µ–∑ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                print("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏")
                print("‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏")
                print("‚Ä¢ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ, –Ω–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
                
            else:
                print(f"‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        else:
            print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ: python main.py")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def validate_fix():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"""
    print("\n" + "="*50)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("="*50)
    
    try:
        from feature_engineer import FeatureEngineer
        from utilities import create_test_data
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–µ–∑ —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_test = create_test_data(100)
        
        # –î–æ–±–∞–≤–ª—è–µ–º rsi_volatility
        import talib
        df_test['rsi_volatility'] = talib.RSI(df_test['close'], timeperiod=14)
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {df_test.shape}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        df_features = FeatureEngineer.create_all_features(df_test)
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏: {df_features.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —É—Ç–µ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–∞–≥–æ–≤—ã–º–∏ –∏–ª–∏ —Ç–µ–∫—É—â–∏–º–∏
        future_features = [col for col in df_features.columns if 'shift(-' in str(col) or '_next' in col and col != 'target_rsi_next']
        checks.append(("–ù–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –±—É–¥—É—â–µ–≥–æ", len(future_features) == 0, f"–ù–∞–π–¥–µ–Ω–æ: {future_features}"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        target_cols = ['target_rsi_next', 'target_rsi_change', 'target_rsi_direction']
        has_targets = all(col in df_features.columns for col in target_cols)
        checks.append(("–¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã", has_targets, f"–ö–æ–ª–æ–Ω–∫–∏: {[col for col in target_cols if col in df_features.columns]}"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–ï–¢ NaN –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∫—Ä–æ–º–µ —Ü–µ–ª–µ–≤—ã—Ö)
        feature_cols = [col for col in df_features.columns if not col.startswith('target_')]
        last_row_nans = df_features[feature_cols].iloc[-1].isna().sum()
        checks.append(("–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤–∞–ª–∏–¥–Ω–∞", last_row_nans < len(feature_cols) * 0.5, f"NaN: {last_row_nans}/{len(feature_cols)}"))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        lag_cols = [col for col in df_features.columns if '_lag_1' in col]
        lag_check = True
        if lag_cols:
            test_col = lag_cols[0]
            base_col = test_col.replace('_lag_1', '')
            if base_col in df_features.columns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ lag_1 = shift(1)
                expected = df_features[base_col].shift(1).iloc[-5:]
                actual = df_features[test_col].iloc[-5:]
                lag_check = expected.equals(actual) or (expected.isna() == actual.isna()).all()
        
        checks.append(("–õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", lag_check, f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ {len(lag_cols)} –∫–æ–ª–æ–Ω–∫–∞—Ö"))
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
        all_passed = True
        for check_name, passed, details in checks:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check_name}")
            if details:
                print(f"   {details}")
            if not passed:
                all_passed = False
        
        if all_passed:
            print(f"\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ –£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞")
            print("‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —á–µ—Å—Ç–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é")
        else:
            print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–•")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    main()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    validate_fix()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    demo_prediction()